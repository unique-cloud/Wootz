
/**
*	Source : Parser.hh
*	Description: Parser holds all the tokens generated by the scanner and parses the program using the grammer passed to it.
*				 It provides the interface to the grammer to access the next token, update the count of variables, function,
*				 and statments.
*/
#ifndef _PRASER_H
#define _PRASER_H

#include <vector>
#include "Token.hh"
#include "Grammar.hh"
#include "Network.hh"
#include "TFGenerator.hh"

class Grammar;
class TFGenerator;

class Parser
{
public:
	/*Consumes current token and moves to next token*/
	Token* nextToken();

	/*Retrives current token*/
	Token* curToken();
	
	/*Inserts a new token to the parser token list*/
	void addToken(Token *newToken);

	/*Starts parsing the program*/
	bool parsePrototxt();

	/*Starts analyzing the network*/
	bool analyzeNetwork();
	
	/*Initializes parsers and assigns grammer*/
	Parser(Grammar* newGrammar, TFGenerator* newTFGen);

	Network* getNetwork();

	~Parser();

private:
	std::vector<Token*> *tokenVector;
	std::vector<Token*>::iterator tokenIT;

	Grammar* myGrammar;
	Network* myNetwork;
	TFGenerator* myTFGen;
};
#endif
